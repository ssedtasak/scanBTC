import pytz, time
import pandas as pd
import requests, os
from datetime import timedelta,datetime
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from parinya import LINE
from IPython.display import display
 
os.chdir(r"C:\Users\sedta\OneDrive\เอกสาร\XRP")

def clean_datetime(df):
    date_time = df['Date'].str[-5:].str.split(':')
    
    for idx, (i, j) in enumerate(date_time):
        i = int(i)
        if i > 23:
            date_time[idx][0] = str(i-24)
            
    for idx, i in enumerate(date_time):
        date_time[idx] = ':'.join(i)
    
    df['Date'] = df['Date'].str[:-5].str.cat(date_time)
    return df

def get_data(driver, url):
    driver.get(url)
    WebDriverWait(driver, 40).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[3]/div[4]/div[2]/div[3]/div/div/div/div[3]/div[2]/div[2]/ul/li[3]')))
    
    html = driver.page_source
    
    df = pd.read_html(html)[6]

    cols = ['Date', 'Block Height', 'Transaction ID', 'Confirmations', 'Inputs', 'Outputs', 'Amount', 'Fees','Fees per byte','Size']
    df.columns = cols

    df['Amount'] = df['Amount'].str.replace('btc', '')
    df['Amount'] = df['Amount'].str.replace(',', "")
    df['Amount'] = df['Amount'].astype('float64')                       
    df['Date'] = df['Date'].str.replace(',', "")   
    df['Date'] = df['Date'].replace('New', getT()) 

    if df['Date'].__contains__('24:'):
        df['Date'] = df['Date'].replace('24:', '00:')
        
    else:
        df['Date'] = df['Date']

    display(df)  
    return df

def getT():
    Time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')     
    return Time

# Hyperparameters
url = 'https://explorer.bitcoin.com/btc/address/1NDyJtNTjmwk5xPNhjgAMu4HDHigtobu1s'
line = LINE('AS028G1OsSpgT3ibFiGRh1E2FgwED8aZOBdmJszcGUj')

# Algorithm

driver = webdriver.Chrome()

while True:
    try:
            Time = getT()
            df = get_data(driver, url) 
            df = df[df['Amount'].isin([20,50,100])]                                
            df = df.reset_index(drop=True)
            if len(df) > 0:
                print('')
                df_min_date = df
                df_min_date['Date'] = pd.to_datetime(df['Date'])
                df_min_date = df.loc[df['Date'] == df['Date'].max(), 'Date'].values[0]
                df_min_date_tag = df.loc[df['Date'] == df['Date'].max(), 'Transaction ID'].values[0]
                print(df_min_date ,df_min_date_tag)

                df_alert = pd.read_csv(r'.\alert_log btc.csv')
                df_alert['Date'] = pd.to_datetime(df_alert['Date'])
                df_alert_min_date = df_alert.loc[df_alert['Date'] == df_alert['Date'].max(), 'Date'].values[0]
                df_alert_min_date_tag = df_alert.loc[df_alert['Date'] == df_alert['Date'].max(), 'Transaction ID'].values[0]
                print(df_alert_min_date, df_alert_min_date_tag)
                
                if df_min_date > df_alert_min_date: #and df_min_date_tag != df_alert_min_date_tag :
                    df['Date'] = pd.to_datetime(df['Date']) 
                    df = df.loc[df['Date'] > df_alert_min_date, :]
                    display(df)
                    
                    for i in range(len(df)):
                        
                        date = df.loc[i, 'Date'].strftime('%Y-%m-%d %H:%M:%S')
                        amount = df.loc[i, 'Amount']
                        tran = df.loc[i, 'Transaction ID']
                        
                        line.sendtext(f'\nDate: {date} \
                                        \nAmount: {amount}\
                                        \nTran: {tran}')
                                    
                        print('Sending notification to LINE')
                                    
                    print('logging')
                    df.to_csv(r'.\alert_log btc.csv', index=False, mode='a', header=False)
        
            else:
                pass
    
    except Exception as e:
        
        print("Something wrong, Please checkc errorlog")
        line.sendtext('Something wrong, Please checkc errorlog"')
        
        with open(r".\errorlogbtc.txt", "a+") as myfile:
            current_time = datetime.now()
            
            myfile.write(f"\n{current_time}")
            myfile.write(f"\nError log: {e}")

    time.sleep(60)
            

                
        

